require "rails_helper"

RSpec.describe Reports::FormDocumentsService do
  let(:form_documents_url) { "#{Settings.forms_api.base_url}/api/v2/form-documents".freeze }
  # This response JSON was generated by making a real API request to forms-api with the data from the database seeds.
  # Once we have transitioned to using the V2 API in forms-admin, it might make more sense to use factories to generate
  # the response.
  let(:form_documents_response_json) { file_fixture("form_documents_response.json").read }

  before do
    stub_request(:get, form_documents_url)
      .with(query: { page: "1", per_page: "3", tag: "live" })
      .to_return(body: form_documents_response_json, headers: response_headers(9, 0, 3))
    stub_request(:get, form_documents_url)
      .with(query: { page: "2", per_page: "3", tag: "live" })
      .to_return(body: form_documents_response_json, headers: response_headers(9, 3, 3))
    stub_request(:get, form_documents_url)
      .with(query: { page: "3", per_page: "3", tag: "live" })
      .to_return(body: form_documents_response_json, headers: response_headers(9, 6, 3))
  end

  it "makes request to forms-api for each page of results" do
    form_documents = described_class.live_form_documents.to_a
    expect(form_documents.size).to eq(9)
    assert_requested(:get, form_documents_url, query: { page: "1", per_page: "3", tag: "live" }, headers:, times: 1)
    assert_requested(:get, form_documents_url, query: { page: "2", per_page: "3", tag: "live" }, headers:, times: 1)
    assert_requested(:get, form_documents_url, query: { page: "3", per_page: "3", tag: "live" }, headers:, times: 1)
  end

  it "returns form documents" do
    form_document = described_class.live_form_documents.first
    expect(form_document).to be_a(Hash)
    expect(form_document).to have_key("form_id")
  end

  context "when forms-api responds with a non-success status code" do
    before do
      stub_request(:get, form_documents_url)
        .with(query: { page: "1", per_page: "3", tag: "live" })
        .to_return(body: "There was an error", status: 400)
    end

    it "raises a StandardError" do
      expect { described_class.live_form_documents.first }.to raise_error(
        StandardError, "Forms API responded with a non-success HTTP code when retrieving form documents: status 400"
      )
    end
  end

  def response_headers(total, offset, limit)
    {
      "pagination-total" => total.to_s,
      "pagination-offset" => offset.to_s,
      "pagination-limit" => limit.to_s,
    }
  end
end
