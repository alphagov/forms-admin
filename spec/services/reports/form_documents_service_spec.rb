require "rails_helper"

RSpec.describe Reports::FormDocumentsService do
  describe ".live_form_documents" do
    let(:form_documents_url) { "#{Settings.forms_api.base_url}/api/v2/form-documents".freeze }
    # This response JSON was generated by making a real API request to forms-api with the data from the database seeds.
    # Once we have transitioned to using the V2 API in forms-admin, it might make more sense to use factories to generate
    # the response.
    let(:form_documents_response_json) { file_fixture("form_documents_response.json").read }

    before do
      allow(Settings.reports).to receive(:forms_api_forms_per_request_page).and_return 4

      stub_request(:get, form_documents_url)
        .with(query: { page: "1", per_page: "4", tag: "live" })
        .to_return(body: form_documents_response_json, headers: response_headers(12, 0, 4))
      stub_request(:get, form_documents_url)
        .with(query: { page: "2", per_page: "4", tag: "live" })
        .to_return(body: form_documents_response_json, headers: response_headers(12, 4, 4))
      stub_request(:get, form_documents_url)
        .with(query: { page: "3", per_page: "4", tag: "live" })
        .to_return(body: form_documents_response_json, headers: response_headers(12, 8, 4))
    end

    it "makes request to forms-api for each page of results" do
      form_documents = described_class.live_form_documents.to_a
      expect(form_documents.size).to eq(12)
      assert_requested(:get, form_documents_url, query: { page: "1", per_page: "4", tag: "live" }, headers:, times: 1)
      assert_requested(:get, form_documents_url, query: { page: "2", per_page: "4", tag: "live" }, headers:, times: 1)
      assert_requested(:get, form_documents_url, query: { page: "3", per_page: "4", tag: "live" }, headers:, times: 1)
    end

    it "returns form documents" do
      form_document = described_class.live_form_documents.first
      expect(form_document).to be_a(Hash)
      expect(form_document).to have_key("form_id")
    end

    context "when forms-api responds with a non-success status code" do
      before do
        stub_request(:get, form_documents_url)
          .with(query: { page: "1", per_page: "4", tag: "live" })
          .to_return(body: "There was an error", status: 400)
      end

      it "raises a StandardError" do
        expect { described_class.live_form_documents.first }.to raise_error(
          StandardError, "Forms API responded with a non-success HTTP code when retrieving form documents: status 400"
        )
      end
    end

    context "when there are forms from internal organisations" do
      let(:organisation) { build :organisation, id: 1, internal: false }
      let(:internal_organisation) { build :organisation, id: 1, internal: true }
      let(:group) { build :group, id: 1, organisation: }
      let(:internal_group) { build :group, id: 1, organisation: internal_organisation }
      let(:group_form) { GroupForm.new(group:) }
      let(:internal_group_form) { GroupForm.new(group: internal_group) }

      before do
        allow(GroupForm).to receive(:find_by_form_id).and_return(group_form)
        allow(GroupForm).to receive(:find_by_form_id).with(3).and_return(internal_group_form)
      end

      it "does not include these forms in the live_form_documents output" do
        form_documents = described_class.live_form_documents.to_a
        expect(form_documents.size).to eq(9)

        form_documents_with_internal_id = form_documents.filter { it["id"] == 3 }
        expect(form_documents_with_internal_id).to be_empty
      end
    end

    def response_headers(total, offset, limit)
      {
        "pagination-total" => total.to_s,
        "pagination-offset" => offset.to_s,
        "pagination-limit" => limit.to_s,
      }
    end
  end
end
